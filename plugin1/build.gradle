apply plugin: 'com.android.application'

/**
 * 注意在gradle.properties中加上android.enableAapt2 = false
 */

import com.android.sdklib.BuildToolInfo
import java.lang.reflect.Method

Task modifyAaptPathTask = task('modifyAaptPath') << {
    android.applicationVariants.all { variant ->
        BuildToolInfo buildToolInfo = variant.androidBuilder.getTargetInfo().getBuildTools()
        Method addMethod = BuildToolInfo.class.getDeclaredMethod("add", BuildToolInfo.PathId.class, File.class)
        addMethod.setAccessible(true)
        //根据系统选择aapt_linux64、aapt_mac、aapt_windows.exe
        addMethod.invoke(buildToolInfo, BuildToolInfo.PathId.AAPT, new File(rootDir, "aapt_windows.exe"))
        println "[LOG] new aapt path = " + buildToolInfo.getPath(BuildToolInfo.PathId.AAPT)
    }
}

android {
    compileSdkVersion 28



    defaultConfig {
        applicationId "com.example.xydzjnq.plugin"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    preBuild.doFirst {
        modifyAaptPathTask.execute()
    }

    aaptOptions {
        aaptOptions.additionalParameters '--PLUG-resoure-id', '0x71'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    compileOnly files("lib/mypluginlibrary.jar")
}

gradle.projectsEvaluated {
    assembleRelease.doLast {
        android.applicationVariants.all { variant ->
            variant.outputs.each { output ->
                File originFile = output.outputFile
                println originFile.absolutePath
                copy {
                    from originFile
                    into "$rootDir/HostApp/src/main/assets"
                    rename(originFile.name, "plugin1.apk")
                }
            }
        }
    }

    assembleDebug.doLast {
        android.applicationVariants.all { variant ->
            variant.outputs.each { output ->
                File originFile = output.outputFile
                println originFile.absolutePath
                copy {
                    from originFile
                    into "$rootDir/HostApp/src/main/assets"
                    rename(originFile.name, "plugin1.apk")
                }
            }
        }
    }
}